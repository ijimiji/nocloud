/*
Copyright Â© 2021-2022 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.services_providers;

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "pkg/states/proto/states.proto";

message Var {
    map<string, google.protobuf.Value> value = 1;
}

message ServicesProvider {
    string uuid = 1;
    string type = 2;
    string title = 3;
    map<string, google.protobuf.Value> secrets = 4; // json
    map<string, Var> vars = 5;
    map<string, google.protobuf.Struct> extentions = 6;
    nocloud.states.State state = 7;
    map<string, google.protobuf.Value> public_data = 8;
    bool public = 9; // If set to true, the provider will be visible to all users
}

message TestResponse {
    bool result = 1;
    string error = 2;
}

message GetRequest {
    string uuid = 1;
}

message ListRequest {
    bool anonymously = 1;
}

message ListResponse {
    repeated ServicesProvider pool = 1;
}

message DeleteRequest {
    string uuid = 1;
}
message DeleteResponse {
    bool result = 1;
    repeated string services = 2;
}

// Available only for users with SUPERUSER and ADMIN access to platform namespace
message ActionRequest {
    nocloud.services_providers.ServicesProvider services_provider = 1;
    message Request {
        google.protobuf.Value action = 1;
        repeated google.protobuf.Value params = 2;
    }
    Request request = 2;
}

message ListExtentionsResponse {
    repeated string types = 1;
}

service ServicesProvidersService {
    rpc Test(nocloud.services_providers.ServicesProvider) returns (nocloud.services_providers.TestResponse) {
        option (google.api.http) = {
            post: "/sp"
            body: "*"
        };
    };
    rpc Create(nocloud.services_providers.ServicesProvider) returns (nocloud.services_providers.ServicesProvider) {
        option (google.api.http) = {
            put: "/sp"
            body: "*"
        };
    };
    rpc Delete(nocloud.services_providers.DeleteRequest) returns (nocloud.services_providers.DeleteResponse) {
        option (google.api.http) = {
            delete: "/sp/{uuid}"
        };
    };
    rpc Update(nocloud.services_providers.ServicesProvider) returns (nocloud.services_providers.ServicesProvider) {
        option (google.api.http) = {
            patch: "/sp/{uuid}"
            body: "*"
        };
    };

    rpc Get(nocloud.services_providers.GetRequest) returns (nocloud.services_providers.ServicesProvider) {
        option (google.api.http) = {
            get: "/sp/{uuid}"
        };
    };
    rpc List(nocloud.services_providers.ListRequest) returns (nocloud.services_providers.ListResponse) {
        option (google.api.http) = {
            get: "/sp"
        };
    };

    rpc Invoke(nocloud.services_providers.ActionRequest) returns (google.protobuf.Struct) {
        option (google.api.http) = {
            post: "/sp/{services_provider.uuid}"
            body: "*"
        };
    };

    rpc ListExtentions(nocloud.services_providers.ListRequest) returns (nocloud.services_providers.ListExtentionsResponse) {
        option (google.api.http) = {
            get: "/sp-ext"
        };
    }
};

message GetTypeRequest {}
message GetTypeResponse {
    string type = 1;
}

message ServicesProvidersExtentionData {
    string uuid = 1;
    google.protobuf.Struct data = 2;
}

message GenericResponse {
    bool result = 1;
    string error = 2;
}

service ServicesProvidersExtentionsService {
    rpc GetType(GetTypeRequest) returns (GetTypeResponse);
    rpc Test(ServicesProvidersExtentionData) returns (GenericResponse);
    rpc Register(ServicesProvidersExtentionData) returns (GenericResponse);
    rpc Update(ServicesProvidersExtentionData) returns (GenericResponse);
    rpc Unregister(ServicesProvidersExtentionData) returns (GenericResponse);
}

message ObjectPublicData {
    string uuid = 1;
    map<string, google.protobuf.Value> data = 2;
}