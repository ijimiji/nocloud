// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vanilla

import (
	context "context"
	proto1 "github.com/slntopp/nocloud/pkg/instances/proto"
	proto "github.com/slntopp/nocloud/pkg/services_providers/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverServiceClient is the client API for DriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverServiceClient interface {
	TestServiceProviderConfig(ctx context.Context, in *TestServiceProviderConfigRequest, opts ...grpc.CallOption) (*proto.TestResponse, error)
	TestInstancesGroupConfig(ctx context.Context, in *proto1.TestInstancesGroupConfigRequest, opts ...grpc.CallOption) (*proto1.TestInstancesGroupConfigResponse, error)
	GetType(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetTypeResponse, error)
	Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpResponse, error)
	Down(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (*DownResponse, error)
	Monitoring(ctx context.Context, in *MonitoringRequest, opts ...grpc.CallOption) (*MonitoringResponse, error)
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*proto1.InvokeResponse, error)
}

type driverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverServiceClient(cc grpc.ClientConnInterface) DriverServiceClient {
	return &driverServiceClient{cc}
}

func (c *driverServiceClient) TestServiceProviderConfig(ctx context.Context, in *TestServiceProviderConfigRequest, opts ...grpc.CallOption) (*proto.TestResponse, error) {
	out := new(proto.TestResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instance.driver.vanilla.DriverService/TestServiceProviderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) TestInstancesGroupConfig(ctx context.Context, in *proto1.TestInstancesGroupConfigRequest, opts ...grpc.CallOption) (*proto1.TestInstancesGroupConfigResponse, error) {
	out := new(proto1.TestInstancesGroupConfigResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instance.driver.vanilla.DriverService/TestInstancesGroupConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) GetType(ctx context.Context, in *GetTypeRequest, opts ...grpc.CallOption) (*GetTypeResponse, error) {
	out := new(GetTypeResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instance.driver.vanilla.DriverService/GetType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpResponse, error) {
	out := new(UpResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instance.driver.vanilla.DriverService/Up", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) Down(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (*DownResponse, error) {
	out := new(DownResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instance.driver.vanilla.DriverService/Down", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) Monitoring(ctx context.Context, in *MonitoringRequest, opts ...grpc.CallOption) (*MonitoringResponse, error) {
	out := new(MonitoringResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instance.driver.vanilla.DriverService/Monitoring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*proto1.InvokeResponse, error) {
	out := new(proto1.InvokeResponse)
	err := c.cc.Invoke(ctx, "/nocloud.instance.driver.vanilla.DriverService/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServiceServer is the server API for DriverService service.
// All implementations must embed UnimplementedDriverServiceServer
// for forward compatibility
type DriverServiceServer interface {
	TestServiceProviderConfig(context.Context, *TestServiceProviderConfigRequest) (*proto.TestResponse, error)
	TestInstancesGroupConfig(context.Context, *proto1.TestInstancesGroupConfigRequest) (*proto1.TestInstancesGroupConfigResponse, error)
	GetType(context.Context, *GetTypeRequest) (*GetTypeResponse, error)
	Up(context.Context, *UpRequest) (*UpResponse, error)
	Down(context.Context, *DownRequest) (*DownResponse, error)
	Monitoring(context.Context, *MonitoringRequest) (*MonitoringResponse, error)
	Invoke(context.Context, *InvokeRequest) (*proto1.InvokeResponse, error)
	mustEmbedUnimplementedDriverServiceServer()
}

// UnimplementedDriverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverServiceServer struct {
}

func (UnimplementedDriverServiceServer) TestServiceProviderConfig(context.Context, *TestServiceProviderConfigRequest) (*proto.TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestServiceProviderConfig not implemented")
}
func (UnimplementedDriverServiceServer) TestInstancesGroupConfig(context.Context, *proto1.TestInstancesGroupConfigRequest) (*proto1.TestInstancesGroupConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestInstancesGroupConfig not implemented")
}
func (UnimplementedDriverServiceServer) GetType(context.Context, *GetTypeRequest) (*GetTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetType not implemented")
}
func (UnimplementedDriverServiceServer) Up(context.Context, *UpRequest) (*UpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Up not implemented")
}
func (UnimplementedDriverServiceServer) Down(context.Context, *DownRequest) (*DownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Down not implemented")
}
func (UnimplementedDriverServiceServer) Monitoring(context.Context, *MonitoringRequest) (*MonitoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Monitoring not implemented")
}
func (UnimplementedDriverServiceServer) Invoke(context.Context, *InvokeRequest) (*proto1.InvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedDriverServiceServer) mustEmbedUnimplementedDriverServiceServer() {}

// UnsafeDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServiceServer will
// result in compilation errors.
type UnsafeDriverServiceServer interface {
	mustEmbedUnimplementedDriverServiceServer()
}

func RegisterDriverServiceServer(s grpc.ServiceRegistrar, srv DriverServiceServer) {
	s.RegisterService(&DriverService_ServiceDesc, srv)
}

func _DriverService_TestServiceProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestServiceProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).TestServiceProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instance.driver.vanilla.DriverService/TestServiceProviderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).TestServiceProviderConfig(ctx, req.(*TestServiceProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_TestInstancesGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.TestInstancesGroupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).TestInstancesGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instance.driver.vanilla.DriverService/TestInstancesGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).TestInstancesGroupConfig(ctx, req.(*proto1.TestInstancesGroupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_GetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).GetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instance.driver.vanilla.DriverService/GetType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).GetType(ctx, req.(*GetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_Up_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).Up(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instance.driver.vanilla.DriverService/Up",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).Up(ctx, req.(*UpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_Down_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).Down(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instance.driver.vanilla.DriverService/Down",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).Down(ctx, req.(*DownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_Monitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).Monitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instance.driver.vanilla.DriverService/Monitoring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).Monitoring(ctx, req.(*MonitoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.instance.driver.vanilla.DriverService/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverService_ServiceDesc is the grpc.ServiceDesc for DriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.instance.driver.vanilla.DriverService",
	HandlerType: (*DriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestServiceProviderConfig",
			Handler:    _DriverService_TestServiceProviderConfig_Handler,
		},
		{
			MethodName: "TestInstancesGroupConfig",
			Handler:    _DriverService_TestInstancesGroupConfig_Handler,
		},
		{
			MethodName: "GetType",
			Handler:    _DriverService_GetType_Handler,
		},
		{
			MethodName: "Up",
			Handler:    _DriverService_Up_Handler,
		},
		{
			MethodName: "Down",
			Handler:    _DriverService_Down_Handler,
		},
		{
			MethodName: "Monitoring",
			Handler:    _DriverService_Monitoring_Handler,
		},
		{
			MethodName: "Invoke",
			Handler:    _DriverService_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/drivers/instance/vanilla/driver.proto",
}
