// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordsServiceClient is the client API for RecordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordsServiceClient interface {
	GetActive(ctx context.Context, in *GetActiveRequest, opts ...grpc.CallOption) (*Records, error)
	Create(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error)
	Update(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error)
}

type recordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordsServiceClient(cc grpc.ClientConnInterface) RecordsServiceClient {
	return &recordsServiceClient{cc}
}

func (c *recordsServiceClient) GetActive(ctx context.Context, in *GetActiveRequest, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, "/nocloud.billing.RecordsService/GetActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordsServiceClient) Create(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, "/nocloud.billing.RecordsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordsServiceClient) Update(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, "/nocloud.billing.RecordsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordsServiceServer is the server API for RecordsService service.
// All implementations must embed UnimplementedRecordsServiceServer
// for forward compatibility
type RecordsServiceServer interface {
	GetActive(context.Context, *GetActiveRequest) (*Records, error)
	Create(context.Context, *Records) (*Records, error)
	Update(context.Context, *Records) (*Records, error)
	mustEmbedUnimplementedRecordsServiceServer()
}

// UnimplementedRecordsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordsServiceServer struct {
}

func (UnimplementedRecordsServiceServer) GetActive(context.Context, *GetActiveRequest) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActive not implemented")
}
func (UnimplementedRecordsServiceServer) Create(context.Context, *Records) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRecordsServiceServer) Update(context.Context, *Records) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRecordsServiceServer) mustEmbedUnimplementedRecordsServiceServer() {}

// UnsafeRecordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordsServiceServer will
// result in compilation errors.
type UnsafeRecordsServiceServer interface {
	mustEmbedUnimplementedRecordsServiceServer()
}

func RegisterRecordsServiceServer(s grpc.ServiceRegistrar, srv RecordsServiceServer) {
	s.RegisterService(&RecordsService_ServiceDesc, srv)
}

func _RecordsService_GetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServiceServer).GetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.billing.RecordsService/GetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServiceServer).GetActive(ctx, req.(*GetActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.billing.RecordsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServiceServer).Create(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nocloud.billing.RecordsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServiceServer).Update(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordsService_ServiceDesc is the grpc.ServiceDesc for RecordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nocloud.billing.RecordsService",
	HandlerType: (*RecordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActive",
			Handler:    _RecordsService_GetActive_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RecordsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RecordsService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/billing/proto/billing.proto",
}
