/*
Copyright Â© 2021-2022 Nikita Ivanovski info@slnt-opp.xyz

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";
package nocloud.services;

import "google/protobuf/struct.proto";
import "pkg/instances/proto/instances.proto";
import "google/api/annotations.proto";
import "pkg/hasher/hasherpb/hasher.proto";
import "pkg/states/proto/states.proto";

enum ServiceStatus {
    UNSPECIFIED = 0;
    INIT = 1;
    MODIFIED = 2;
    UP = 3;
    DOWN = 4;
    DEL = 5;
    PROC = 6;
}

message Service {
    string uuid = 1;
    string version = 2
        [(nocloud.hasher.hashed) = true];
    string title = 3;
    ServiceStatus status = 4;
    map<string, google.protobuf.Value> context = 5
        [(nocloud.hasher.hashed) = true];
    repeated nocloud.instances.InstancesGroup instances_groups = 6;
    string hash = 7 [(nocloud.hasher.hash) = true];
    optional int32 access_level = 8;
}

message Services {
    repeated Service pool = 1;
}

message TestConfigError {
    string error = 1;
    string instance_group = 2;
    string instance = 3;
}

message TestConfigResponse {
    bool result = 1;
    repeated TestConfigError errors = 2;
}

message CreateRequest {
    Service service = 1;
    string namespace = 2;
    map<int32, string> deploy_policies = 3;  // Map of InstanceGroup UUID to ServiceProvider
}

message DeleteRequest {
    string uuid = 1;
}

message DeleteResponse {
    bool result = 1;
    string error = 2;
}

message UpRequest {
    string uuid = 1;
}

message UpError {
    map<string, string> data = 1;
}
message UpResponse {
    repeated UpError errors = 1;
}

message DownRequest {
    string uuid = 1;
}
message DownResponse {}

message ListRequest {
    optional string show_deleted = 1;
    optional string namespace = 2;
    optional int32 depth = 3;
}

message GetRequest {
    string uuid = 1;
}

message GetStatesRequest {
    string uuid = 1; // Service UUID
}

message StreamRequest {
    string uuid = 1;
}

message BindPlanRequest {
    string uuid = 1;
    string plan_uuid = 2;
}

message BindPlanResponse {}

message UnbindPlanRequest {
    string uuid = 1;
    string plan_uuid = 2;
}

message UnbindPlanResponse {}

service ServicesService {
    rpc TestConfig(nocloud.services.CreateRequest)
        returns (nocloud.services.TestConfigResponse) {
        option (google.api.http) = {
            post: "/services"
            body: "*"
        };
    };
    rpc Create(nocloud.services.CreateRequest)
        returns (nocloud.services.Service) {
        option (google.api.http) = {
            put: "/services"
            body: "*"
        };
    };
    rpc Update(nocloud.services.Service)
        returns (nocloud.services.Service) {
        option (google.api.http) = {
            patch: "/services/{uuid}"
            body: "*"
        };
    };
    rpc Delete(nocloud.services.DeleteRequest)
        returns (nocloud.services.DeleteResponse) {
        option (google.api.http) = {
            delete: "/services/{uuid}"
        };
    };

    rpc Get(nocloud.services.GetRequest) returns (nocloud.services.Service) {
        option (google.api.http) = {
            get: "/services/{uuid}"
        };
    };
    rpc List(nocloud.services.ListRequest)
        returns (nocloud.services.Services) {
        option (google.api.http) = {
            get: "/services"
        };
    };

    rpc Up(nocloud.services.UpRequest) returns (nocloud.services.UpResponse) {
        option (google.api.http) = {
            post: "/services/{uuid}/up"
            body: "*"
        };
    };
    rpc Down(nocloud.services.DownRequest)
        returns (nocloud.services.DownResponse) {
        option (google.api.http) = {
            post: "/services/{uuid}/down"
            body: "*"
        };
    };
    rpc Stream(nocloud.services.StreamRequest) returns (stream nocloud.states.ObjectState) {
        option (google.api.http) = {
            get: "/services/{uuid}/stream"
        };
    };
    rpc BindPlan(nocloud.services.BindPlanRequest) returns (nocloud.services.BindPlanResponse) {
        option (google.api.http) = {
            post: "/services/{uuid}/bind_plan/{plan_uuid}"
            body: '*'
        };
    };
    rpc UnbindPlan(nocloud.services.UnbindPlanRequest) returns (nocloud.services.UnbindPlanResponse) {
        option (google.api.http) = {
            post: "/services/{uuid}/unbind_plan/{plan_uuid}"
            body: '*'
        };
    }; 
}