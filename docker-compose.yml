version: "3.8"
services:
  proxy:
    image: nginx
    depends_on:
      - health
      - registry
      - services-registry
      - sp-registry
      - settings
      - dns-mgmt
    volumes:
      - ./proxy:/etc/nginx/templates
    ports:
      - 8080:8080
    networks:
      - proxy
  health:
    container_name: health-service
    restart: always
    image: ghcr.io/slntopp/nocloud/health:latest
    environment:
      LOG_LEVEL: -1
      SIGNING_KEY: "${SIGNING_KEY}"
      REGISTRY_HOST: registry:8080
      SERVICES_HOST: services-registry:8080
      SP_HOST: sp-registry:8080
      SETTINGS_HOST: settings:8080
      DNS_HOST: dns-mgmt:8080
      STATES_HOST: states:8080
      EDGE_HOST: edge:8080
    networks:
      - proxy
      - grpc-internal
  apiserver-web:
    container_name: apiserver-web
    image: ghcr.io/slntopp/nocloud/apiserver-web:latest
    environment:
      LOG_LEVEL: -1
      WITH_BLOCK: "true"
      APISERVER_HOST: proxy:8080
    ports:
      - 8000:8000 # REST-API
    networks:
      - proxy
  registry:
    container_name: registry
    restart: always
    image: ghcr.io/slntopp/nocloud/registry:latest
    environment:
      LOG_LEVEL: -1
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      NOCLOUD_ROOT_PASSWORD: "${NOCLOUD_ROOT_PASS}"
      SIGNING_KEY: "${SIGNING_KEY}"
      SETTINGS_HOST: settings:8080
    depends_on:
      - db
    networks:
      - proxy
      - arangodb
      - grpc-internal
    links:
      - db
  services-registry:
    container_name: services-registry
    restart: always
    image: ghcr.io/slntopp/nocloud/services-registry:latest
    environment:
      LOG_LEVEL: -1
      SIGNING_KEY: "${SIGNING_KEY}"
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      SETTINGS_HOST: settings:8080
      STATES_HOST: states:8080
    depends_on:
      - db
    networks:
      - proxy
      - arangodb
      - grpc-internal
    links:
      - db
  sp-registry:
    container_name: sp-registry
    restart: always
    image: ghcr.io/slntopp/nocloud/sp-registry:latest
    environment:
      LOG_LEVEL: -1
      SIGNING_KEY: "${SIGNING_KEY}"
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      SETTINGS_HOST: settings:8080
      STATES_HOST: states:8080
    networks:
      - proxy
      - arangodb
      - grpc-internal
    links:
      - db
  edge:
    container_name: edge
    restart: always
    image: ghcr.io/slntopp/nocloud/edge:latest
    environment:
      LOG_LEVEL: -1
      SIGNING_KEY: "${SIGNING_KEY}"
      DB_HOST: db:8529
      DB_CRED: "${DB_USER}:${DB_PASS}"
      STATES_HOST: states:8080
    networks:
      - proxy
      - arangodb
      - grpc-internal
    links:
      - db

  dns-mgmt:
    restart: always
    image: ghcr.io/slntopp/nocloud/dns-mgmt:latest
    networks:
      - proxy
      - grpc-internal
      - redis
    environment:
      LOG_LEVEL: -1
      SIGNING_KEY: "${SIGNING_KEY}"
      REDIS_HOST: redis:6379
  settings:
    restart: always
    image: ghcr.io/slntopp/nocloud/settings:latest
    networks:
      - proxy
      - grpc-internal
      - redis
    environment:
      LOG_LEVEL: -1
      SIGNING_KEY: "${SIGNING_KEY}"
      REDIS_HOST: redis_settings:6379
  redis_settings:
    image: redis
    restart: always
    command: redis-server --save 60 1
    networks:
      - redis
    volumes:
      - redis-settings-data:/data

  states:
    restart: always
    image: ghcr.io/slntopp/nocloud/states:latest
    networks:
      - grpc-internal
      - redis
    environment:
      LOG_LEVEL: -1
      PORT: 8080
      REDIS_HOST: redis_states:6379
  redis_states:
    image: redis
    restart: always
    command: redis-server --save 60 1
    networks:
      - redis
    ports:
      - 6379:6379
    volumes:
      - redis-states-data:/data

  db:
    container_name: database-master
    restart: always
    image: arangodb/arangodb:latest
    environment:
      ARANGO_ROOT_PASSWORD: "${DB_PASS}"
    ports:
      - 8529:8529
    volumes:
      - data:/var/lib/arangodb3
      - ./database/schemes/:/docker-entrypoint-initdb.d/dumps/nocloud/
    networks:
      - arangodb

networks:
  proxy:
    driver: bridge
  grpc-internal:
  arangodb:
    driver: bridge
  redis:
    driver: bridge

volumes:
  redis-settings-data:
  redis-states-data:
  data:
